group 'ru.spbau.mit'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
//    maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

def grpcVersion = '1.3.0' // CURRENT_GRPC_VERSION

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.jetbrains', name: 'annotations', version: '15.0'

//    compile 'com.google.protobuf:protobuf-java:3.0.0'
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
//        ofSourceSet('main')*.plugins {
//            // Apply the "grpc" plugin whose spec is defined above, without
//            // options.  Note the braces cannot be omitted, otherwise the
//            // plugin will not be added. This is because of the implicit way
//            // NamedDomainObjectContainer binds the methods.
//            grpc { }
//        }
    }
}

// Inform IntelliJ projects about the generated code.
apply plugin: 'idea'

idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false


task ServerApplication(type: CreateStartScripts) {
    mainClassName = 'ru.spbau.mit.ServerApplication'
    applicationName = 'server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

//task ClientApplication(type: CreateStartScripts) {
//    mainClassName = 'ru.spbau.mit.ClientApplication'
//    applicationName = 'client'
//    outputDir = new File(project.buildDir, 'tmp')
//    classpath = jar.outputs.files + project.configurations.runtime
//}

//task compressingHelloWorldClient(type: CreateStartScripts) {
//    mainClassName = 'io.grpc.examples.experimental.CompressingHelloWorldClient'
//    applicationName = 'compressing-hello-world-client'
//    outputDir = new File(project.buildDir, 'tmp')
//    classpath = jar.outputs.files + project.configurations.runtime
//}

applicationDistribution.into('bin') {
    from(ServerApplication)
//    from(ClientApplication)
    fileMode = 0755
}